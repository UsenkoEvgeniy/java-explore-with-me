{
	"info": {
		"_postman_id": "1d1a69a1-5952-49a0-87cf-16694f4585c6",
		"name": "FeatureTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12734979"
	},
	"item": [
		{
			"name": "CreateDB",
			"item": [
				{
					"name": "Create user1",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"User1\",\r\n    \"email\":\"user1@email.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"User2\",\r\n    \"email\":\"user2@email.com\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user3",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"User3\",\r\n    \"email\":\"user3@email.com\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create category",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"cat1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create event1",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\":\"Event1 Iure nihil earum perspiciatis.\",\r\n    \"category\":1,\r\n    \"description\":\"Maiores voluptas est eveniet culpa vero consectetur fuga quo.\",\r\n    \"eventDate\":\"2023-08-20 20:15:37\",\r\n    \"location\":{\"lat\":79.8837,\"lon\":14.1056},\r\n    \"paid\":\"false\",\r\n    \"participantLimit\":\"821\",\r\n    \"requestModeration\":\"true\",\r\n    \"title\":\"Event1 for likes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create event2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\":\"Event2 Iure nihil earum perspiciatis.\",\r\n    \"category\":1,\r\n    \"description\":\"Maiores voluptas est eveniet culpa vero consectetur fuga quo.\",\r\n    \"eventDate\":\"2023-08-20 20:15:37\",\r\n    \"location\":{\"lat\":79.8837,\"lon\":14.1056},\r\n    \"paid\":\"false\",\r\n    \"participantLimit\":\"222\",\r\n    \"requestModeration\":\"true\",\r\n    \"title\":\"Event2 for likes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create event3",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\":\"Event3 Iure nihil earum perspiciatis.\",\r\n    \"category\":1,\r\n    \"description\":\"Maiores voluptas est eveniet culpa vero consectetur fuga quo.\",\r\n    \"eventDate\":\"2023-08-20 20:15:37\",\r\n    \"location\":{\"lat\":79.8837,\"lon\":14.1056},\r\n    \"paid\":\"false\",\r\n    \"participantLimit\":\"333\",\r\n    \"requestModeration\":\"true\",\r\n    \"title\":\"Event3 for likes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create event4",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\":\"Event4 Iure nihil earum perspiciatis.\",\r\n    \"category\":1,\r\n    \"description\":\"Maiores voluptas est eveniet culpa vero consectetur fuga quo.\",\r\n    \"eventDate\":\"2023-08-20 20:15:37\",\r\n    \"location\":{\"lat\":79.8837,\"lon\":14.1056},\r\n    \"paid\":\"false\",\r\n    \"participantLimit\":\"444\",\r\n    \"requestModeration\":\"true\",\r\n    \"title\":\"Event4 for likes\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/3/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"3",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish event1",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\":\"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/events/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish event2",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\":\"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/events/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish event3",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\":\"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/events/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish event4",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\":\"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/events/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add likes",
			"item": [
				{
					"name": "Create like from user 1 to event 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Код ответа должен быть 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/events/1/like?like=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events",
								"1",
								"like"
							],
							"query": [
								{
									"key": "like",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create like from user 1 to event 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Код ответа должен быть 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/events/2/like?like=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events",
								"2",
								"like"
							],
							"query": [
								{
									"key": "like",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create like from user 2 to event 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Код ответа должен быть 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/2/events/1/like?like=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"events",
								"1",
								"like"
							],
							"query": [
								{
									"key": "like",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create dislike from user 2 to event 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Код ответа должен быть 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/2/events/3/like?like=false",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"events",
								"3",
								"like"
							],
							"query": [
								{
									"key": "like",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create dislike from user 1 to event 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Код ответа должен быть 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/events/3/like?like=false",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events",
								"3",
								"like"
							],
							"query": [
								{
									"key": "like",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create dislike from user 3 to event 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Код ответа должен быть 201\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/3/events/3/like?like=false",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"3",
								"events",
								"3",
								"like"
							],
							"query": [
								{
									"key": "like",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create second like from user 1 to event 1 conflict",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Код ответа должен быть 409\", function(){\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/events/1/like?like=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events",
								"1",
								"like"
							],
							"query": [
								{
									"key": "like",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create like from user 999 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Код ответа должен быть 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/999/events/1/like?like=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"999",
								"events",
								"1",
								"like"
							],
							"query": [
								{
									"key": "like",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create like for event 999 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Код ответа должен быть 404\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/events/999/like?like=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events",
								"999",
								"like"
							],
							"query": [
								{
									"key": "like",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check rating endpoints",
			"item": [
				{
					"name": "Check event1 has 2 like",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"У event1 должно быть 2 лайка\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(1);\r",
									"    pm.expect(responseJson.likes).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/events/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check event2 has 1 like",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"У event2 должен быть 1 лайк\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(2);\r",
									"    pm.expect(responseJson.likes).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/2/events/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"events",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check event3 has 3 dislikes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"У event3 должно быть 3 дизлайка\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(3);\r",
									"    pm.expect(responseJson.likes).to.eql(-3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/2/events/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"events",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение событий сортировка по общему количеству реакций",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Сортировка должна выдать 3 2 1 4\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.length).to.eql(4);\r",
									"    pm.expect(responseJson[0].id).to.eql(3);\r",
									"    pm.expect(responseJson[1].id).to.eql(1);\r",
									"    pm.expect(responseJson[2].id).to.eql(2);\r",
									"    pm.expect(responseJson[3].id).to.eql(4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/events?sort=REACTIONS",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events"
							],
							"query": [
								{
									"key": "sort",
									"value": "REACTIONS"
								}
							]
						},
						"description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
					},
					"response": []
				},
				{
					"name": "Получение событий сортировка по лайкам",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Сортировка должна выдать 1 2 4 3\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.length).to.eql(4);\r",
									"    pm.expect(responseJson[0].id).to.eql(1);\r",
									"    pm.expect(responseJson[1].id).to.eql(2);\r",
									"    pm.expect(responseJson[2].id).to.eql(4);\r",
									"    pm.expect(responseJson[3].id).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/events?sort=LIKES",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"events"
							],
							"query": [
								{
									"key": "sort",
									"value": "LIKES"
								}
							]
						},
						"description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
					},
					"response": []
				},
				{
					"name": "Получение пользователей сортировка по лайкам",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Сортировка должна выдать 1 3 2\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.length).to.eql(3);\r",
									"    pm.expect(responseJson[0].id).to.eql(1);\r",
									"    pm.expect(responseJson[1].id).to.eql(3);\r",
									"    pm.expect(responseJson[2].id).to.eql(2);    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/admin/users/rating",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users",
								"rating"
							]
						},
						"description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
					},
					"response": []
				},
				{
					"name": "Получение рейтинга пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Рейтинг user1 должен быть 2\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(1);\r",
									"    pm.expect(responseJson.rating).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://localhost:8080/admin/users/1/rating",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users",
								"1",
								"rating"
							]
						},
						"description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
					},
					"response": []
				}
			]
		}
	]
}